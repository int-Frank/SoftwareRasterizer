//================================================================================
// @ Vector2.cpp
// 
// Description: Definitions for the Vector2 class
//
// -------------------------------------------------------------------------------
//
// Authors: James M. Van Verth, Lars M. Bishop
// Retrieved From: Essential Mathematics for Games and Interactive Applications SE
// On Date: 2013
//
// Modified by: Frank Hart
// Date last modified: 2013
//
//================================================================================

#include "Vector2.h"
#include "CommonMath.h"


//--------------------------------------------------------------------------------
//		STATIC MEMBERS
//--------------------------------------------------------------------------------

Vector2 Vector2::xAxis(1.0f, 0.0f);
Vector2 Vector2::yAxis(0.0f, 1.0f);
Vector2 Vector2::origin(0.0f, 0.0f);


//--------------------------------------------------------------------------------
//	@	Vector2::Vector2()
//--------------------------------------------------------------------------------
//		Copy constructor
//--------------------------------------------------------------------------------
Vector2::Vector2(const Vector2& v): x(v.x), y(v.y)
{
}	//End: Vector2::Vector2()


//--------------------------------------------------------------------------------
//	@	Vector2::operator=()
//--------------------------------------------------------------------------------
//		Assignment operator
//--------------------------------------------------------------------------------
Vector2& Vector2::operator= (const Vector2& v)
{
	x = v.x;
	y = v.y;

	return *this;

}	//End: Vector2::operator=()


//--------------------------------------------------------------------------------
//	@	Vector2::operator==()
//--------------------------------------------------------------------------------
//		Comparison operator
//--------------------------------------------------------------------------------
bool Vector2::operator== (const Vector2& other) const
{
	if (DgAreEqual(other.x,x)
		&& DgAreEqual(other.y,y))
		return true;

	return false;

}	//End: Vector2::operator==()


//--------------------------------------------------------------------------------
//	@	operator<<()
//--------------------------------------------------------------------------------
//		Output 
//--------------------------------------------------------------------------------
DgWriter& operator<<(DgWriter& out, const Vector2& source)
{
	out << '<' << source.x << ' ' << source.y << '>';

	return out;
    
}   // End of operator<<()


//--------------------------------------------------------------------------------
//	@	operator>>()
//--------------------------------------------------------------------------------
//		Build vector from in stream
//--------------------------------------------------------------------------------
DgReader& operator>> (DgReader& in, Vector2& dest)
{
    if ((in >> dest.x >> dest.y).fail())
    {
        std::cerr << "@operator>>(Vector2) -> Bad read." << std::endl;
    }

	return in;

}	//End: operator>>()


//--------------------------------------------------------------------------------
//	@	Vector2::operator!=()
//--------------------------------------------------------------------------------
//		Comparison operator
//--------------------------------------------------------------------------------
bool Vector2::operator!= (const Vector2& other) const
{
	if (DgAreEqual(other.x,x)
		&& DgAreEqual(other.y,y))
		return false;

	return true;

}	//End: Vector2::operator!=()


//--------------------------------------------------------------------------------
//	@	Vector2::IsZero()
//--------------------------------------------------------------------------------
//		Check for zero vector
//--------------------------------------------------------------------------------
bool Vector2::IsZero () const
{
	return ::IsZero(x*x + y*y);

}	//End: Vector2::IsZero()


//--------------------------------------------------------------------------------
//	@	Vector2::IsUnit()
//--------------------------------------------------------------------------------
//		Checks for unit vector
//--------------------------------------------------------------------------------
bool Vector2::IsUnit() const
{
	return ::IsZero(1.0f - x*x + y*y);

}	//End: Vector2::IsUnit()


//--------------------------------------------------------------------------------
//	@	Vector2::Set()
//--------------------------------------------------------------------------------
//		Set x, y
//--------------------------------------------------------------------------------
void Vector2::Set(float xval, float yval)
{
	x = xval; 
	y = yval;

}	//End: Vector2::Set()


//--------------------------------------------------------------------------------
//	@	Vector2::Clean()
//--------------------------------------------------------------------------------
//		Sets elements close to zero to zero
//--------------------------------------------------------------------------------
void Vector2::Clean()
{
	if (::IsZero(x))
		x = 0.0f;
	if (::IsZero(y))
		y = 0.0f;

}	//End: Vector2::Clean()


//--------------------------------------------------------------------------------
//	@	Vector2::Zero()
//--------------------------------------------------------------------------------
//		Zero all elements
//--------------------------------------------------------------------------------
void Vector2::Zero()
{
	x = y = 0.0f;

}	//End: Vector2::Zero()


//--------------------------------------------------------------------------------
//	@	Vector2::Normalize()
//--------------------------------------------------------------------------------
//		Set to a unit vector
//--------------------------------------------------------------------------------
void Vector2::Normalize()
{
	float lengthsq = x*x + y*y;

	if (::IsZero(lengthsq))
	{
		Zero();
	}
	else
	{
		float factor = DgInvSqrt(lengthsq);
		x *= factor;
		y *= factor;
	}

}	//End: Vector2::Normalize()


//--------------------------------------------------------------------------------
//	@	Vector2::operator+()
//--------------------------------------------------------------------------------
//		Add vector to self and return
//--------------------------------------------------------------------------------
Vector2 Vector2::operator+ (const Vector2& v) const
{
	return Vector2(x + v.x, y + v.y);

}	//End: Vector2::operator+()


//--------------------------------------------------------------------------------
//	@	Vector2::operator+=()
//--------------------------------------------------------------------------------
//		Add vector to self, store in self
//--------------------------------------------------------------------------------
Vector2& operator+= (Vector2& self, const Vector2& other)
{
	self.x += other.x;
	self.y += other.y;

	return self;

}	//End: Vector2::operator+=()


//--------------------------------------------------------------------------------
//	@	Vector2::operator-()
//--------------------------------------------------------------------------------
//		Subtract vector from self and return
//--------------------------------------------------------------------------------
Vector2 Vector2::operator- (const Vector2& v) const
{
	return Vector2(x - v.x, y - v.y);

}	//End: Vector2::operator-()


//--------------------------------------------------------------------------------
//	@	Vector2::operator-=()
//--------------------------------------------------------------------------------
//		Subtract vector to self, store in self
//--------------------------------------------------------------------------------
Vector2& operator-= (Vector2& self, const Vector2& other)
{
	self.x -= other.x;
	self.y -= other.y;

	return self;

}	//End: Vector2::operator-=()


//--------------------------------------------------------------------------------
//	@	Vector2::-()
//--------------------------------------------------------------------------------
//		Negate self and return
//--------------------------------------------------------------------------------
Vector2 Vector2::operator- () const
{
	return Vector2(-x, -y);

}	//End: Vector2::operator-()


//--------------------------------------------------------------------------------
//	@	Vector2::operator*()
//--------------------------------------------------------------------------------
//		Scalar multiplication
//--------------------------------------------------------------------------------
Vector2 Vector2::operator* (float val)
{
	return Vector2(val*x, val*y);

}	//End: Vector2::operator*()


//--------------------------------------------------------------------------------
//	@	operator*()
//--------------------------------------------------------------------------------
//		Scalar multiplication
//--------------------------------------------------------------------------------
Vector2 operator* (float val, const Vector2& v)
{
	return Vector2(val*v.x, val*v.y);

}	//End: operator*()


//--------------------------------------------------------------------------------
//	@	Vector2::operator*=()
//--------------------------------------------------------------------------------
//		Scalar multiplication by self
//--------------------------------------------------------------------------------
Vector2& Vector2::operator*= (float val)
{
	x *= val;
	y *= val;

	return *this;

}	//End: Vector2::operator*=()


//--------------------------------------------------------------------------------
//	@	Vector2::operator/()
//--------------------------------------------------------------------------------
//		Scalar division
//--------------------------------------------------------------------------------
Vector2 Vector2::operator/ (float val)
{
	return Vector2(x/val, y/val);

}	//End: Vector2::operator/()


//--------------------------------------------------------------------------------
//	@	Vector2::operator/=()
//--------------------------------------------------------------------------------
//		Scalar multiplication by self
//--------------------------------------------------------------------------------
Vector2& Vector2::operator/= (float val)
{
	x /= val;
	y /= val;

	return *this;

}	//End: Vector2::operator/=()


//--------------------------------------------------------------------------------
//	@	Dot()
//--------------------------------------------------------------------------------
//		Dot product
//--------------------------------------------------------------------------------
float Dot (const Vector2& v1, const Vector2& v2)
{
	return (v1.x*v2.x + v1.y*v2.y);

}	//End: Dot()


//--------------------------------------------------------------------------------
//	@	Vector2::PerpDot()
//--------------------------------------------------------------------------------
//		PerpDot product (similar to 3D cross product)
//--------------------------------------------------------------------------------
float PerpDot(const Vector2& v1, const Vector2& v2)
{
	return (v1.x*v2.y - v1.y*v2.x);

}	//End: Perpdot()


//--------------------------------------------------------------------------------
//	@	DistVector2Vector2()
//--------------------------------------------------------------------------------
//		Point distance
//--------------------------------------------------------------------------------
float DistVector2Vector2(const Vector2& p1, const Vector2& p2)
{
	float x = p1.x - p2.x;
	float y = p1.y - p2.y;

	return ::DgSqrt(x*x + y*y);

}	//End: DistVector2Vector2()


//--------------------------------------------------------------------------------
//	@	SqDistVector2Vector2()
//--------------------------------------------------------------------------------
//		Point distance squared
//--------------------------------------------------------------------------------
float SqDistVector2Vector2(const Vector2& p1, const Vector2& p2)
{
	float x = p1.x - p2.x;
	float y = p1.y - p2.y;

	return (x*x + y*y);

}	//End: SqDistVector2Vector2()


//--------------------------------------------------------------------------------
//	@	Vector2::Length()
//--------------------------------------------------------------------------------
//		Vector Length
//--------------------------------------------------------------------------------
float Vector2::Length() const
{
	return DgSqrt(x*x + y*y);

}	//End: Vector::Length()


//--------------------------------------------------------------------------------
//	@	Vector2::LengthSquared()
//--------------------------------------------------------------------------------
//		Vector Length squared
//--------------------------------------------------------------------------------
float Vector2::LengthSquared() const
{
	return (x*x + y*y);

}	//End: Vector::Length()